/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.baibin.otel.example

import io.opentelemetry.api.GlobalOpenTelemetry
import io.opentelemetry.api.OpenTelemetry
import io.opentelemetry.api.common.Attributes
import io.opentelemetry.api.trace.Span
import io.opentelemetry.api.trace.SpanBuilder
import io.opentelemetry.api.trace.Tracer
import io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator
import io.opentelemetry.context.propagation.ContextPropagators
import io.opentelemetry.exporter.logging.LoggingMetricExporter
import io.opentelemetry.exporter.logging.LoggingSpanExporter
import io.opentelemetry.exporter.otlp.http.metrics.OtlpHttpMetricExporter
import io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter
import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporter
import io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter
import io.opentelemetry.sdk.OpenTelemetrySdk
import io.opentelemetry.sdk.metrics.SdkMeterProvider
import io.opentelemetry.sdk.metrics.export.PeriodicMetricReader
import io.opentelemetry.sdk.resources.Resource
import io.opentelemetry.sdk.trace.SdkTracerProvider
import io.opentelemetry.sdk.trace.export.BatchSpanProcessor
import io.opentelemetry.semconv.resource.attributes.ResourceAttributes


fun main() {
    // Initialize the OpenTelemetry tracer
    initOpenTelemetry()
    val tracer: Tracer = GlobalOpenTelemetry.getTracer("my-tracer")

    // Start a new span
    val spanBuilder: SpanBuilder = tracer.spanBuilder("my-span")
    val span: Span = spanBuilder.startSpan()
    try {
        // Add attributes to the span
        span.setAttribute("attribute-key", "attribute-value")
        // Execute some operation within the span
        doSomeOperation()
    } catch (e: Exception) {
        // Record an exception in the span
        span.recordException(e)
        // Set the span as escaped to indicate the exception has escaped
        span.setAttribute("exception.escaped", true)
    } finally {
        // Close the span scope
        span.end()
    }
}

fun initOpenTelemetry(): OpenTelemetry {
    // Include required service.name resource attribute on all spans and metrics
    val resource = Resource.getDefault()
        .merge(Resource.create(Attributes.of(ResourceAttributes.SERVICE_NAME, "open-telemetry-example")))

    val sdkTracerProvider = SdkTracerProvider.builder()
        .addSpanProcessor(BatchSpanProcessor.builder(OtlpHttpSpanExporter.builder().build()).build())
        .setResource(resource)
        .build()

    val sdkMeterProvider = SdkMeterProvider.builder()
        .registerMetricReader(PeriodicMetricReader.builder(LoggingMetricExporter.create()).build())
        .setResource(resource)
        .build()
    val sdk = OpenTelemetrySdk.builder()
        .setTracerProvider(sdkTracerProvider)
        .setMeterProvider(sdkMeterProvider)
        .setPropagators(ContextPropagators.create(W3CTraceContextPropagator.getInstance()))
        .buildAndRegisterGlobal()
    Runtime.getRuntime().addShutdownHook( Thread(sdk::close))
    return sdk
}

fun doSomeOperation() {
    // Start a new span within the current context
    val tracer: Tracer = GlobalOpenTelemetry.getTracer("my-tracer")
    val spanBuilder: SpanBuilder = tracer.spanBuilder("my-child-span")
    val span: Span = spanBuilder.startSpan()
    try {
        // Add attributes to the child span
        span.setAttribute("child-attribute-key", "child-attribute-value")

        // Simulate some operation
        Thread.sleep(1000)
    } finally {
        // Close the child span scope
        span.end()
    }
}

